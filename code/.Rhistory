print("Hello World")
q()
# CMEE 2022 HPC exercises R code main pro forma
# You don't HAVE to use this but it will be very helpful.
# If you opt to write everything yourself from scratch please ensure you use
# EXACTLY the same function and parameter names and beware that you may lose
# marks if it doesn't work properly because of not using the pro-forma.
name <- "Bowen Duan"
preferred_name <- "Bowen"
email <- "bd623@imperial.ac.uk"
username <- "bd623"
# Please remember *not* to clear the workspace here, or anywhere in this file.
# If you do, it'll wipe out your username information that you entered just
# above, and when you use this file as a 'toolbox' as intended it'll also wipe
# away everything you're doing outside of the toolbox.  For example, it would
# wipe away any automarking code that may be running and that would be annoying!
# Question 1
species_richness <- function(community){
#test <- species_richness(c(1,4,4,5,1,6,1))
# test
# >>> 4
return(length(unique(community)))
}
# Question 2
init_community_max <- function(size){
#seq生成的本身就是一个向量，所以我这个函数编写后输出的community虽然看起来像整数，但其实它是一个向量
community<- seq(1,size)
return(community)
# test1 <- init_community_max(10)
# test1
# >>> 1  2  3  4  5  6  7  8  9 10
}
# Question 3
init_community_min <- function(size){
#这里使用了rep生成一个所有元素均为1的向量，代表所有的个体都属于物种1。即仅仅有一个物种类别，其数量为size
community <- rep(1,size)
return(community)
# test2 <- init_community_min(10)
# test2
# >>> 1 1 1 1 1 1 1 1 1 1
}
# test the code
# test3 <- species_richness(init_community_max(10))
# tes3
# >>> 10
# test4 <- species_richness(init_community_min(10))
# test4
# >>> 1
# Question 4
choose_two <- function(max_value){
wanted_integers <- sample(1:max_value , size =2)
return(wanted_integers)
# test5 <- choose_two(5)
# one possible output >>> 3 5
}
# Question 5
neutral_step <- function(community){
#find the dying index and the reproduction index
chosen_two_species <- choose_two(length(community))
dying_index <- chosen_two_species[1]
reproduction_index <- chosen_two_species[2]
community[dying_index] <- community[reproduction_index]
return(community)
}
# Question 6
neutral_generation <- function(community){
# 确定要执行的 neutral_step 步骤数量
num_steps <- length(community) / 2
# 如果个体数不是偶数，则随机决定是向上还是向下取整
if (length(community) %% 2 != 0) {
num_steps <- ifelse(runif(1) < 0.5, floor(num_steps), ceiling(num_steps))
}
# 执行指定数量的 neutral_step 步骤
for (i in 1:num_steps) {
community <- neutral_step(community)
}
return(community)
}
# Question 7
neutral_time_series <- function(community,duration)  {
# 初始化包含初始物种丰富度的向量
species_richness_series <- numeric(duration + 1)
species_richness_series[1] <- species_richness(community)
# 对每一个世代进行模拟
for (i in 1:duration) {
community <- neutral_generation(community)
species_richness_series[i + 1] <- species_richness(community)
}
return(species_richness_series)
}
# Question 8
question_8 <- function() {
# 初始化初始条件和运行时间
initial_community <- init_community_max(100)
duration <- 200
# 获取时间序列
time_series <- neutral_time_series(initial_community, duration)
png("question_8", width = 600, height = 400)
# plot your graph here
plot(time_series, type = "l", xlab = "Generation", ylab = "Species Richness", main = "Neutral Model Time Series")
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
print(question_8())
# Question 9
neutral_step_speciation <- function(community,speciation_rate)  {
# 随机选择死亡和繁殖个体
chosen_two_species <- choose_two(length(community))
dying_index <- chosen_two_species[1]
reproduction_index <- chosen_two_species[2]
# 决定是否发生物种形成
if (runif(1) < speciation_rate) {
# 物种形成: 引入一个新的物种编号
new_species <- max(community) + 1
community[dying_index] <- new_species
} else {
# 无物种形成: 与之前一样处理
community[dying_index] <- community[reproduction_index]
}
return(community)
}
# Question 10
neutral_generation_speciation <- function(community,speciation_rate)  {
# 确定要执行的 neutral_step_speciation 步骤数量
num_steps <- length(community) / 2
# 如果个体数不是偶数，则随机决定是向上还是向下取整
if (length(community) %% 2 != 0) {
num_steps <- ifelse(runif(1) < 0.5, floor(num_steps), ceiling(num_steps))
}
# 执行指定数量的 neutral_step_speciation 步骤
for (i in 1:num_steps) {
community <- neutral_step_speciation(community, speciation_rate)
}
return(community)
}
# Question 11
neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
# 初始化包含初始物种丰富度的向量
species_richness_series <- numeric(duration + 1)
species_richness_series[1] <- species_richness(community)
# 对每一个世代进行模拟
for (i in 1:duration) {
community <- neutral_generation_speciation(community, speciation_rate)
species_richness_series[i + 1] <- species_richness(community)
}
return(species_richness_series)
}
# Question 12
question_12 <- function()  {
# 初始化参数
speciation_rate <- 0.1
community_size <- 100
duration <- 200
# 生成两种不同初始条件的群落
max_community <- init_community_max(community_size)
min_community <- init_community_min(community_size)
# 分别对两种初始条件运行带有物种形成的中性模型模拟
time_series_max <- neutral_time_series_speciation(max_community, duration, speciation_rate)
time_series_min <- neutral_time_series_speciation(min_community, duration, speciation_rate)
png(filename="question_12", width = 600, height = 400)
# plot your graph here
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
print(question_12())
# Question 13
species_abundance <- function(community)  {
# 使用 table 函数统计每个物种的个体数
abundances <- table(community)
# 使用 sort 函数对个体数进行降序排序
sorted_abundances <- sort(abundances, decreasing = TRUE)
return(sorted_abundances)
}
# Question 14
octaves <- function(abundance_vector) {
# 计算每个物种丰富度的对数（以 2 为底），然后向下取整
octave_classes <- floor(log(abundances, base = 2)) + 1
# 使用 tabulate 函数统计每个八度类中的物种数量
octave_counts <- tabulate(octave_classes)
return(octave_counts)
}
# Question 8
question_8 <- function() {
# 初始化初始条件和运行时间
initial_community <- init_community_max(100)
duration <- 200
# 获取时间序列
time_series <- neutral_time_series(initial_community, duration)
png("question_8", width = 600, height = 400)
# plot your graph here
plot(time_series, type = "l", xlab = "Generation", ylab = "Species Richness", main = "Neutral Model Time Series")
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
print(question_8())
# Question 8
question_8 <- function() {
# 初始化初始条件和运行时间
initial_community <- init_community_max(100)
duration <- 200
# 获取时间序列
time_series <- neutral_time_series(initial_community, duration)
png("question_8", width = 600, height = 400)
# plot your graph here
plot(time_series, type = "l", xlab = "Generation", ylab = "Species Richness", main = "Neutral Model Time Series")
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
print(question_8())
# Question 8
question_8 <- function() {
# 初始化初始条件和运行时间
initial_community <- init_community_max(100)
duration <- 200
# 获取时间序列
time_series <- neutral_time_series(initial_community, duration)
png("question_8", width = 600, height = 400)
# plot your graph here
plot(time_series, type = "l", xlab = "Generation", ylab = "Species Richness", main = "Neutral Model Time Series")
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
print(question_8())
# Question 8
question_8 <- function() {
# 初始化初始条件和运行时间
initial_community <- init_community_max(100)
duration <- 200
# 获取时间序列
time_series <- neutral_time_series(initial_community, duration)
png("../question_8", width = 600, height = 400)
# plot your graph here
plot(time_series, type = "l", xlab = "Generation", ylab = "Species Richness", main = "Neutral Model Time Series")
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
print(question_8())
# Question 8
question_8 <- function() {
# 初始化初始条件和运行时间
initial_community <- init_community_max(100)
duration <- 200
# 获取时间序列
time_series <- neutral_time_series(initial_community, duration)
png("../results/question_8", width = 600, height = 400)
# plot your graph here
plot(time_series, type = "l", xlab = "Generation", ylab = "Species Richness", main = "Neutral Model Time Series")
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
print(question_8())
q()
load("/home/bd623/Documents/CMEECourseWork/week10/code/my_test_file_1.rda")
head()
head(result)
email
# written by james rosindell james@rosindell.org Imperial college london released open source under an MIT license
# Assign random speciation rates to class
CMEE_2023 <- c(
"mg2020",
"pvt23",
"fx23",
"gk523",
"tr220",
"bd623",
"hg2423",
"jg923",
"zh1323",
"yj2323",
"dl2423",
"zml23",
"ts920",
"scs23",
"sw920",
"cw323",
"xx123",
"yy1423",
"pz123",
"lz723",
"kc523",
"zs519",
"jjh13",
"xw1722",
"xy23"
)
choose_student <- function(class) {
print(sample(class,1))
}
choose_student_2 <- function(class,seedin = 1) {
set.seed(seedin)
print(sample(class,1))
}
choose_student_3 <- function(class,seedin=-1) {
if (seedin <= 0){
set.seed(floor(proc.time()[3]*1000))
}
else {
set.seed(seedin)
}
print(sample(class,1))
}
assign_student_number <- function(class=CMEE_2023,seedin=2023,min=0.002,max=0.007,sigfig=4,unique=TRUE) {
if (seedin <= 0){
set.seed(floor(proc.time()[3]*1000))
}
else {
set.seed(seedin)
}
speciation_values <- signif(runif(length(class))*(max-min)+min,sigfig)
if (unique){
while(length(unique(speciation_values)) < length(class)){
speciation_values <- signif(runif(length(class))*(max-min)+min,sigfig)
}
}
return(cbind(speciation_values,class))
}
print(assign_student_number())
# [6,] "0.002604"        "bd623"
# CMEE 2022 HPC exercises R code pro forma
# For neutral model cluster run
rm(list=ls()) # good practice
source("bd623_HPC_2023_main.R")
# 读取集群作业号（用于集群）
# iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
# 本地测试时使用的作业号
iter <- 1 # 请根据需要更改此值
# 控制随机数种子
set.seed(iter)
# 根据作业号选择社区大小
if (iter <= 25) {
size <- 500
} else if (iter <= 50) {
size <- 1000
} else if (iter <= 75) {
size <- 2500
} else {
size <- 5000
}
# 设置物种形成率（请替换为实际值）
speciation_rate <- 0.002604 # 示例值
# 创建存储结果的文件名
result_filename <- paste("simulation_result_", iter, ".rda", sep="")
# 调用模拟函数
neutral_cluster_run(size, speciation_rate, interval_rich=1, interval_oct=size/10, burn_in_generations=8*size, filename=result_filename)
# 注意：确保`neutral_cluster_run`函数与这里的参数调用方式匹配
load("/home/bd623/Documents/CMEECourseWork/week10/code/my_test_file_1.rda")
head(result)
load("/home/bd623/Documents/CMEECourseWork/week10/code/output_1.rda")
head(result)
load("/home/bd623/Documents/CMEECourseWork/week10/code/output_ 1 .rda")
head(result)
load("/home/bd623/Documents/CMEECourseWork/week10/code/output_ 1 .rda")
data<-load("/home/bd623/Documents/CMEECourseWork/week10/code/output_ 1 .rda")
head(data)
load("/home/bd623/Documents/CMEECourseWork/week10/code/output_1.rda")
head(result)
source("bd623_HPC_2023_main.R")
print(question_33())
question_33()
source("bd623_HPC_2023_main.R")
question_33
print(question_33())
load("/home/bd623/Documents/CMEECourseWork/week10/code/output_2.rda")
head(result)
source("bd623_HPC_2023_main.R")
str(combined_results)
process_neutral_cluster_results()
warnings()
process_neutral_cluster_results <- function() {
  file_list <- list.files(path = "../Q19_final", pattern = "output_.*\\.rda", full.names = TRUE)
  combined_results <- list()
  for (file in file_list) {
    load(file)
    size <- as.numeric(strsplit(gsub("output_", "", basename(file)), "_")[[1]][1])
    if (!is.null(size) && length(result$abundance_list) > 0) {
      if (!is.list(combined_results[[as.character(size)]])) {
        combined_results[[as.character(size)]] <- matrix(0, nrow = length(result$abundance_list), ncol = length(result$abundance_list[[1]]))
      }
      for (i in 1:length(result$abundance_list)) {
        combined_results[[as.character(size)]][i, ] <- combined_results[[as.character(size)]][i, ] + result$abundance_list[[i]]
      }
    }
  }
  for (size in names(combined_results)) {
    combined_results[[size]] <- apply(combined_results[[size]], 2, mean)
  }
  save(combined_results, file = "../results/summary_results.rda")
}
process_neutral_cluster_results()
process_neutral_cluster_results()
plot_neutral_cluster_results()
source("bd623_HPC_2023_main.R")
question_33()
question_33()
question_33()
question_33()
source("bd623_HPC_2023_main.R")
question_33()
source("bd623_HPC_2023_main.R")
print(question_36())
